#problem 1: build a caculator to add and sub two number
class Calculator
  def add(a, b)
   a+b
  end

  def subtract(a, b)
   a-b
  end
end

#problem 2: Find length of string in array
def length_finder(input_array)
  result=Array.new
  input_array.each do |string|
    result << string.length
  end
  return result
end

#or
def length_finder(input_array)
	input_array.collect{|string| string.length}
	#collect = map
end

#problem 3: find the frequency of a string in a sentence
def find_frequency(sentence, word)
  count = 0
  wordarray=sentence.downcase.split(" ")
  wordarray.each do |wordcurrent|
    count = (count +1) if word.downcase == wordcurrent
  end
  return count
end

#or another way
def find_frequency(sentence, word)
  sentence.downcase.split.count(word.downcase)
end

#problem 4: sort the words in a given sentence
def string_sort(string)
	string.split(' ').sort{|x,y| x.length <=> y.length}.join(' ')
end
puts string_sort("doi la phu cmn du")

#problem 5: return random elements from an array
def random_select(array, n)
  result = Array.new
  n.times do 
    result << array[rand(array.length)]
  end
  return result
end

#problem 6: hiring programmers - Boolean Expressions in ruby
is_an_experienced_programmer =
  (candidate.years_of_experience >= 2 || candidate.github_points >= 500) && !(candidate.age < 15 || candidate.applied_recently?) && (candidate.languages_worked_with.include? 'Ruby')

#problem 7: Palindromes
def palindrome?(sentence)
  temp=sentence.downcase.gsub(" ","")
  temp == temp.reverse
end

#problem 8: compute sum of cubes for given range
#this problem I use the solution bacause I don' understand what it mean.
def sum_of_cubes(a, b)
  (a..b).inject(0) { |sum, x| sum += (x*x*x) }
end

#problem 9: find non-duplicate values in an Array
def non_duplicated_values(values)
  values.each do |num|
    values.delete(num) if values.count(num)>=2
  end
  return values
end
#or 
def non_duplicated_values(values)
  values.find_all { |x| values.count(x) == 1 }
end

#problem 10: Check if all element in an array are Fixnum
def array_of_fixnums?(array)
  array.all? {|x| x.is_a? Fixnum}
end

#problem 11: Kaprekar's number
#9^2 = 81 = 8+1
def kaprekar?(k)
	number_of_k=k.to_s.size
	k2=(k ** 2).to_s
	num_right=k2[-number_of_k..-1]
    num_left=k2[0..(k2.size-num_right.to_s.size-1)].to_i
	k==num_right.to_i+num_left
end
kaprekar(9)
kaprekar(297)

#problem 12: Enough Contrast
class Color
  attr_reader :r, :g, :b
  def initialize(r, g, b)
    @r = r
    @g = g
    @b = b
  end

  def brightness_index
    (299 * @r + 587 * @g + 114 * @b) / 1000
  end

  def brightness_difference(another_color)
    (brightness_index-another_color.brightness_index).abs
  end

  def hue_difference(another_color)
    (r-another_color.r).abs+(g-another_color.g).abs+(b-another_color.b).abs
  end

  def enough_contrast?(another_color)
    brightness_difference(another_color) > 125 && hue_difference(another_color) > 500
  end
end

#problem 13: time to run code
def exec_time(a)
  begin_time = Time.now
  a.call
  return Time.now - begin_time
end

#problem 14: Number shuffle
#fucking perfect. I have done. oh yeah.
def num_of_num(number)
	number_of_num=1
	number_size=number.to_s.size
  while number_size > 1 do
    number_of_num = number_of_num * 	number_size
    number_size = number_size - 1 
  end
   return number_of_num
end
def number_shuffle(number)
	number_of_num = num_of_num(number)
	char=number.to_s.split(//)
	result=[]
	result << char.shuffle.join('').to_i while result.uniq.size != number_of_num
	result.uniq.sort
end

#problem 15: orders and costs
#omg. I'm god :3
class Restaurant
  def initialize(menu)
    @menu = menu
  end

  def cost(*orders) 
    result = 0
    orders.each do |item|
      puts item
      item.each do |food_name, num|
        result = result + @menu[food_name]*item[food_name]
      end
    end
    result
  end
end
#or (solution)
class Restaurant
  def initialize(menu)
    @menu = menu
  end

  def cost(*orders)
    orders.inject(0) do |total_cost, order|
      total_cost + order.keys.inject(0) {|cost, key| cost + @menu[key]*order[key] }
    end
  end
end

#problem 19: Your sum - The lastest problem
